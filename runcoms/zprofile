# -*- mode: sh; eval: (sh-set-shell "zsh") -*-
# Executes commands at login pre-zshrc.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

#
# Language
#

if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
fi

if [[ -z "$LC_ALL" ]]; then
  export LC_ALL='en_US.UTF-8'
fi


#
# Browser
#

if [[ "$OSTYPE" == darwin* ]]; then
  export BROWSER='open'
fi

#
# Editors
#

case $OSTYPE in
  darwin*)
    if [ -x "${HOME}/bin/macos/Emacs.sh" ] ; then
      use_editor="${HOME}/bin/macos/Emacs.sh"
    else
      use_editor="emacsclient -c"
    fi
    export EDITOR="${use_editor}"
    ;;
  *)
    # create new frame in windowing env
    if (( $+commands[vim] )) ; then
      export EDITOR="${EMACSCLIENT} -a vim --create-frame"
    else
      export EDITOR="${EMACSCLIENT} -a vi --create-frame"
    fi
    ;;
esac


export VISUAL=$EDITOR
export PAGER='less'


#
# Paths
#

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

# Set the list of directories that cd searches.
# cdpath=(
#   $cdpath
# )

#
# Less
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi


# http://zsh.sourceforge.net/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell
#
# - $CPUTYPE (run-time) ::
#
#   aarch64 : 64-bit Ubuntu on RasPi
#   armv7l  : 32-bit RasPiOS on RasPi
#   arm64   : macOS (M1 Apple Silicon)
#   x86_64  : macOS (M1 Apple Silicon under Rosetta 2)
#   x86_64  : Intel Linux
#
# - $(uname -m) :: (matches $CPUTYPE exactly)
#
#   aarch64 : 64-bit Ubuntu on RasPi
#   armv7l  : 32-bit RasPiOS on RasPi
#   arm64   : macOS (M1 Apple Silicon)
#   x86_64  : macOS (M1 Apple Silicon under Rosetta 2)
#   x86_64  : Intel Linux
#
# - $OSTYPE ::
#
#   linux-gnu       : 64-bit Ubuntu on RasPi
#   linux-gnueabihf : 32-bit RasPiOS on RasPi
#   darwin20.0      : macOS (M1 Apple Silicon)
#   darwin20.0      : macOS (M1 Apple Silicon under Rosetta 2)
#   linux-gnu       : Ubuntu Linux on Intel
#
# - $(uname -s) ::
#
#   Linux : 64-bit Ubuntu on RasPi
#   Linux : 32-bit RasPiOS on RasPi
#   Linux : macOS M1 (Apple Silicon)
#   Darwin : macOS (M1 Apple Silicon)
#   Darwin : macOS (M1 Apple Silicon under Rosetta 2)
#   Linux : Intel Linux
#
# - $MACHTYPE (compile-time) ::
#
#   aarch64 : 64-bit Ubuntu on RasPi
#   arm     : 32-bit RasPiOS on RasPi
#   x86_64  : macOS (M1 Apple Silicon) ** $SHELL /bin/zsh
#   x86_64  : macOS (M1 Apple Silicon under Rosetta 2)
#   x86_64  : Intel Linux
#

arch_name="${CPUTYPE}" # same as `uname -m`
os_name="$(uname -s)"  # similar to $OSNAME

# Diagnostics for runtime environment
# https://cutecoder.org/software/detecting-apple-silicon-shell-script/
if [[ "${os_name}" == "Darwin" ]] ; then
  if [ "${arch_name}" = "x86_64" ]; then
    # Linux: sysctl: invalid option -- 'i'
    if [ "$(sysctl -in sysctl.proc_translated)" = "1" ]; then
      echo "macOS running on Rosetta 2"
    else
      echo "macOS running on native Intel"
    fi
  elif [ "${arch_name}" = "arm64" ]; then
    echo "macOS running on ARM"
  else
    echo "Unknown architecture: ${arch_name}"
  fi
elif [[ "${os_name}" == "Linux" ]] ; then
    echo "Linux running on ${arch_name}"
fi


# Homebrew ------------------------------------------------------------

# handle Apple Silicon Homebrew
if [[ "${arch_name}" == "arm64" ]] ; then
  if [ -x /opt/homebrew/bin/brew ] ; then
    eval $(/opt/homebrew/bin/brew shellenv)
  fi
fi

# handle Intel Homebrew
if [[ "${arch_name}" == "x86_64" ]] ; then
  if [ -x /usr/local/bin/brew ] ; then
    eval $(/usr/local/bin/brew shellenv)
  fi
fi

# /etc/zprofile is sourced after ~/.zshenv for interactive shells
# on macOS these two get added to front of path there
# DEPRECATED: handle in homebrew shellenv and/or macOS /usr/libexec/path_helper
# Set the list of directories that Zsh searches for programs.
# path=(
#   /usr/local/{bin,sbin}
#   $path
# )

if [[ "${os_name}" == "Linux" ]] ; then
  path=(
    /usr/local/{bin,sbin}
    $path
  )
  if [[ -d /usr/local/go/bin ]] ; then
    path=( /usr/local/go/bin $path )
  fi
fi

# echo $(systemd-path user-binaries)
path=("$HOME"/bin $path)
path=("$HOME"/.local/bin $path)

# more PATH config
if [ -f ${shell_config}/path.zsh.inc ] ; then
    # shellcheck source=/dev/null
    source "${shell_config}"/path.zsh.inc
fi

# https://github.com/golang/go/wiki/SettingGOPATH - https://golang.org/doc/code.html#GOPATH
# mkdir -p ~/go/src/github.com ; mkdir -p ~/go/bin
# NOTE: `go` executable must be in PATH
if [[ -d $(go env GOPATH) ]] ; then
    # export GOPATH=$HOME/go
    export GOPATH=$(go env GOPATH)
    path+=$(go env GOPATH)/bin
fi

# https://github.com/nvm-sh/nvm#installing-and-updating
# .zprezto has built-in support for nvm via node module, so do not need
# See node module:  https://github.com/sorin-ionescu/prezto/tree/master/modules/node
# export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
# export NVM_DIR="$( printf %s "${HOME}/.nvm" )"

# perl local modules
# https://metacpan.org/pod/local::lib
if [ -d $HOME/perl5/lib/perl5 ] ; then
    # sets PERL5LIB and others
    eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)"
    # should warn that it is already in PATH
    path+=$HOME/perl5/bin
fi

if [[ "$OSTYPE" == linux* ]]
then
    # http://www.funtoo.org/Keychain
    # sudo apt install keychain
    if [ -x /usr/bin/keychain ]; then
        keychainpath=/usr/bin/keychain
        #eval "$($keychainpath --quiet --eval --agents ssh --inherit any id_rsa)"
        eval "$($keychainpath --quiet --noask --eval --agents ssh --inherit any id_rsa)"
        unset keychainpath
   fi
fi


# # added by rustup - enable prezto module instead
# export PATH="$HOME/.cargo/bin:$PATH"

# per host environment variables
nodename=$(uname -n)
if [[ -f "${shell_config}"/env.$nodename.sh ]] ; then
    # shellcheck source=/dev/null
    source "${shell_config}"/env.$nodename.sh
fi
